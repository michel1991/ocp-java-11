package stream.flatMap;
import java.util.stream.*;
import java.util.*;
import java.util.Map.*;
import java.util.function.*;

public class PrintTireDashWheelDash {
    /**
    * Which of the following are true? (Choose all that apply.)

        A. Zero lines are generated by the line marked by peek 1.
        B. Two lines are generated by the line marked by peek 1.
        C. Three lines are generated by the line marked by peek 1.
        D. Zero lines are generated by the line marked by peek 2.
        E. Two lines are generated by the line marked by peek 2.
        F. Three lines are generated by the line marked by peek 2.
        G. The code does not compile.
        H. The code throws an exception.

        The Stream starts out containing three lists.
        Since we limit the size to 2, the third list is ignored.
        his means peek 2 is run twice—for x1 and x2—making option B correct.
        Then flatMap() runs, getting rid of the empty list and flattening out the three elements of x2.
        Now peek 2 sees these three elements, making option F correct.
        Finally, each of the three elements has 1 added to it,
        and those numbers (2, 3, and 4) are printed by the forEach().
     */
  static void printTireDashWheelDash(){
        List<Integer> x1 = Arrays.asList();
        List<Integer> x2 = Arrays.asList(1, 2, 3);
        List<Integer> x3 = Arrays.asList(4, 5, 6);
        Stream.of(x1, x2, x3)
            .limit(2)
            .peek(System.out::println) // peek 1
            .flatMap(x -> x.stream())
            .peek(System.out::println) // peek 2
            .map(x -> x + 1)
            .forEach(System.out::println);
    }
    
    public static void main(String... args){
        printTireDashWheelDash();
        System.out.println();
    }
}